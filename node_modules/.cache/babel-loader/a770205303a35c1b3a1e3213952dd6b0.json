{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useQueryParam, decodeString, encodeString } from 'use-query-params';\nimport { ApplicationType } from './ApplicationTypeSelector';\n\nconst useApplicationTypeSelector = () => {\n  _s();\n\n  const [applicationType, setApplicationType] = useQueryParam('application_type', {\n    decode: val => decodeString(val),\n    encode: val => encodeString(val)\n  });\n\n  const handleApplicationTypeChange = newType => {\n    setApplicationType(newType, 'pushIn');\n  };\n\n  return {\n    applicationType: applicationType || ApplicationType.RECEIVED,\n    handleApplicationTypeChange\n  };\n};\n\n_s(useApplicationTypeSelector, \"7X5XW8HwjBmE42ZRoZ/dnubkfYU=\", false, function () {\n  return [useQueryParam];\n});\n\nexport default useApplicationTypeSelector;","map":{"version":3,"sources":["/home/ivana/projekti/react-hr-recruitment-tool/src/views/Home/partials/ApplicationTypeSelector/useApplicationTypeSelector.ts"],"names":["useQueryParam","decodeString","encodeString","ApplicationType","useApplicationTypeSelector","applicationType","setApplicationType","decode","val","encode","handleApplicationTypeChange","newType","RECEIVED"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,YAAxB,EAAsCC,YAAtC,QAA0D,kBAA1D;AACA,SAASC,eAAT,QAAgC,2BAAhC;;AAEA,MAAMC,0BAA0B,GAAG,MAAM;AAAA;;AACvC,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCN,aAAa,CAAkB,kBAAlB,EAAsC;AAC/FO,IAAAA,MAAM,EAAEC,GAAG,IAAIP,YAAY,CAACO,GAAD,CADoE;AAE/FC,IAAAA,MAAM,EAAED,GAAG,IAAIN,YAAY,CAACM,GAAD;AAFoE,GAAtC,CAA3D;;AAKA,QAAME,2BAA2B,GAAIC,OAAD,IAA8B;AAChEL,IAAAA,kBAAkB,CAACK,OAAD,EAAU,QAAV,CAAlB;AACD,GAFD;;AAIA,SAAO;AACLN,IAAAA,eAAe,EAAEA,eAAe,IAAIF,eAAe,CAACS,QAD/C;AAELF,IAAAA;AAFK,GAAP;AAID,CAdD;;GAAMN,0B;UAC0CJ,a;;;AAehD,eAAeI,0BAAf","sourcesContent":["import { useQueryParam, decodeString, encodeString } from 'use-query-params';\nimport { ApplicationType } from './ApplicationTypeSelector';\n\nconst useApplicationTypeSelector = () => {\n  const [applicationType, setApplicationType] = useQueryParam<ApplicationType>('application_type', {\n    decode: val => decodeString(val) as ApplicationType,\n    encode: val => encodeString(val),\n  });\n\n  const handleApplicationTypeChange = (newType: ApplicationType) => {\n    setApplicationType(newType, 'pushIn');\n  };\n\n  return {\n    applicationType: applicationType || ApplicationType.RECEIVED,\n    handleApplicationTypeChange,\n  };\n};\n\nexport default useApplicationTypeSelector;\n"]},"metadata":{},"sourceType":"module"}